# This is a basic workflow to help you get started with Actions
name: Build Android app

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ master ]
    paths-ignore:
      - '**/README.md'
    tags:
      - '*'
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

  # A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    name: Build and release android app
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    env:
      ANDROID_KEY_FILE: /tmp/key.properties
      JSON_KEY_FILE: /tmp/service-account.json
    #env:
    #  JAVA_VERSION: "11.0"
    #  FLUTTER_VERSION: "2.5.3"
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'adopt'
      - uses: cachix/install-nix-action@v22
        with:
          nix_path: nixpkgs=channel:nixos-23.11
      - name: Extract tag name
        id: extract_tag
        if: startsWith(github.ref, 'refs/tags/')
        run: echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
      - name: Decode and write keystore file
        run: echo ${{ secrets.ANDROID_KEYSTORE_BASE64 }} | base64 --decode > /tmp/keystore.jks
      - name: Decode and write Service account file
        run: echo ${{ secrets.GOOGLE_SERVICE_ACCOUNT }} | base64 --decode > /tmp/service-account.json

      - name: Create key.properties file
        run: |
          echo "storePassword=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}" >> /tmp/key.properties
          echo "keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}" >> /tmp/key.properties
          echo "keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}" >> /tmp/key.properties
          echo "storeFile=/tmp/keystore.jks" >> /tmp/key.properties
      - run: set -e
      - name: Build app
        working-directory: src/main/app
        run: |
          git submodule init
          git submodule update
          ./submodules/flutter/bin/flutter doctor
          ./submodules/flutter/bin/flutter config --no-analytics
          ./submodules/flutter/bin/flutter pub get
          ./submodules/flutter/bin/flutter build apk --split-per-abi
          ./submodules/flutter/bin/flutter build appbundle
      - name: Set up Ruby
        if: startsWith(github.ref, 'refs/tags/')
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.0'
          working-directory: src/main/app/android
      - name: Install dependencies
        if: startsWith(github.ref, 'refs/tags/')
        working-directory: src/main/app/android
        run: |
          bundle install

      - name: Run Fastlane to release
        working-directory: src/main/app/android
        if: startsWith(github.ref, 'refs/tags/')
        run: bundle exec fastlane deploy

      - name: Archive build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: apks
          path: src/main/app/build/app/outputs/flutter-apk
      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          repo_token: ${{ secrets.GH_TOKEN }}
          file: src/main/app/build/app/outputs/flutter-apk/*
          tag: ${{ github.ref }}
          overwrite: true
          file_glob: true
