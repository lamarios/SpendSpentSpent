/*
 * This file is generated by jOOQ.
 */
package com.ftpix.sss.dsl;


import com.ftpix.sss.dsl.tables.ApiKeys;
import com.ftpix.sss.dsl.tables.Category;
import com.ftpix.sss.dsl.tables.Expense;
import com.ftpix.sss.dsl.tables.Files;
import com.ftpix.sss.dsl.tables.FlywaySchemaHistory;
import com.ftpix.sss.dsl.tables.Household;
import com.ftpix.sss.dsl.tables.HouseholdMembers;
import com.ftpix.sss.dsl.tables.MonthlyHistory;
import com.ftpix.sss.dsl.tables.RecurringExpense;
import com.ftpix.sss.dsl.tables.ResetPassword;
import com.ftpix.sss.dsl.tables.Settings;
import com.ftpix.sss.dsl.tables.User;
import com.ftpix.sss.dsl.tables.YearlyHistory;
import com.ftpix.sss.dsl.tables.records.ApiKeysRecord;
import com.ftpix.sss.dsl.tables.records.CategoryRecord;
import com.ftpix.sss.dsl.tables.records.ExpenseRecord;
import com.ftpix.sss.dsl.tables.records.FilesRecord;
import com.ftpix.sss.dsl.tables.records.FlywaySchemaHistoryRecord;
import com.ftpix.sss.dsl.tables.records.HouseholdMembersRecord;
import com.ftpix.sss.dsl.tables.records.HouseholdRecord;
import com.ftpix.sss.dsl.tables.records.MonthlyHistoryRecord;
import com.ftpix.sss.dsl.tables.records.RecurringExpenseRecord;
import com.ftpix.sss.dsl.tables.records.ResetPasswordRecord;
import com.ftpix.sss.dsl.tables.records.SettingsRecord;
import com.ftpix.sss.dsl.tables.records.UserRecord;
import com.ftpix.sss.dsl.tables.records.YearlyHistoryRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<ApiKeysRecord> API_KEYS_PKEY = Internal.createUniqueKey(ApiKeys.API_KEYS, DSL.name("api_keys_pkey"), new TableField[] { ApiKeys.API_KEYS.ID }, true);
    public static final UniqueKey<CategoryRecord> CATEGORY_PKEY = Internal.createUniqueKey(Category.CATEGORY, DSL.name("category_pkey"), new TableField[] { Category.CATEGORY.ID }, true);
    public static final UniqueKey<ExpenseRecord> EXPENSE_PKEY = Internal.createUniqueKey(Expense.EXPENSE, DSL.name("expense_pkey"), new TableField[] { Expense.EXPENSE.ID }, true);
    public static final UniqueKey<FilesRecord> FILES_PKEY = Internal.createUniqueKey(Files.FILES, DSL.name("files_pkey"), new TableField[] { Files.FILES.ID }, true);
    public static final UniqueKey<FlywaySchemaHistoryRecord> FLYWAY_SCHEMA_HISTORY_PK = Internal.createUniqueKey(FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY, DSL.name("flyway_schema_history_pk"), new TableField[] { FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY.INSTALLED_RANK }, true);
    public static final UniqueKey<HouseholdRecord> HOUSEHOLD_PKEY = Internal.createUniqueKey(Household.HOUSEHOLD, DSL.name("household_pkey"), new TableField[] { Household.HOUSEHOLD.ID }, true);
    public static final UniqueKey<HouseholdMembersRecord> HOUSEHOLD_MEMBERS_PKEY = Internal.createUniqueKey(HouseholdMembers.HOUSEHOLD_MEMBERS, DSL.name("household_members_pkey"), new TableField[] { HouseholdMembers.HOUSEHOLD_MEMBERS.ID }, true);
    public static final UniqueKey<MonthlyHistoryRecord> MONTHLY_HISTORY_PKEY = Internal.createUniqueKey(MonthlyHistory.MONTHLY_HISTORY, DSL.name("monthly_history_pkey"), new TableField[] { MonthlyHistory.MONTHLY_HISTORY.ID }, true);
    public static final UniqueKey<RecurringExpenseRecord> RECURRING_EXPENSE_PKEY = Internal.createUniqueKey(RecurringExpense.RECURRING_EXPENSE, DSL.name("recurring_expense_pkey"), new TableField[] { RecurringExpense.RECURRING_EXPENSE.ID }, true);
    public static final UniqueKey<ResetPasswordRecord> RESET_PASSWORD_PKEY = Internal.createUniqueKey(ResetPassword.RESET_PASSWORD, DSL.name("reset_password_pkey"), new TableField[] { ResetPassword.RESET_PASSWORD.ID }, true);
    public static final UniqueKey<SettingsRecord> SETTINGS_PKEY = Internal.createUniqueKey(Settings.SETTINGS, DSL.name("settings_pkey"), new TableField[] { Settings.SETTINGS.NAME }, true);
    public static final UniqueKey<UserRecord> USER_EMAIL_KEY = Internal.createUniqueKey(User.USER, DSL.name("user_email_key"), new TableField[] { User.USER.EMAIL }, true);
    public static final UniqueKey<UserRecord> USER_PKEY = Internal.createUniqueKey(User.USER, DSL.name("user_pkey"), new TableField[] { User.USER.ID }, true);
    public static final UniqueKey<YearlyHistoryRecord> YEARLY_HISTORY_PKEY = Internal.createUniqueKey(YearlyHistory.YEARLY_HISTORY, DSL.name("yearly_history_pkey"), new TableField[] { YearlyHistory.YEARLY_HISTORY.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<ApiKeysRecord, UserRecord> API_KEYS__FK_API_KEY_USER = Internal.createForeignKey(ApiKeys.API_KEYS, DSL.name("fk_api_key_user"), new TableField[] { ApiKeys.API_KEYS.USER_ID }, Keys.USER_PKEY, new TableField[] { User.USER.ID }, true);
    public static final ForeignKey<CategoryRecord, UserRecord> CATEGORY__FK_CATEGORY_USER = Internal.createForeignKey(Category.CATEGORY, DSL.name("fk_category_user"), new TableField[] { Category.CATEGORY.USER_ID }, Keys.USER_PKEY, new TableField[] { User.USER.ID }, true);
    public static final ForeignKey<ExpenseRecord, CategoryRecord> EXPENSE__FK_EXPENSE_CATEGORY = Internal.createForeignKey(Expense.EXPENSE, DSL.name("fk_expense_category"), new TableField[] { Expense.EXPENSE.CATEGORY_ID }, Keys.CATEGORY_PKEY, new TableField[] { Category.CATEGORY.ID }, true);
    public static final ForeignKey<FilesRecord, ExpenseRecord> FILES__FK_SSS_FILE_EXPENSE = Internal.createForeignKey(Files.FILES, DSL.name("fk_sss_file_expense"), new TableField[] { Files.FILES.EXPENSE_ID }, Keys.EXPENSE_PKEY, new TableField[] { Expense.EXPENSE.ID }, true);
    public static final ForeignKey<FilesRecord, UserRecord> FILES__FK_SSS_FILE_USER = Internal.createForeignKey(Files.FILES, DSL.name("fk_sss_file_user"), new TableField[] { Files.FILES.USER_ID }, Keys.USER_PKEY, new TableField[] { User.USER.ID }, true);
    public static final ForeignKey<HouseholdMembersRecord, HouseholdRecord> HOUSEHOLD_MEMBERS__FK_HOUSEHOLD = Internal.createForeignKey(HouseholdMembers.HOUSEHOLD_MEMBERS, DSL.name("fk_household"), new TableField[] { HouseholdMembers.HOUSEHOLD_MEMBERS.HOUSEHOLD_ID }, Keys.HOUSEHOLD_PKEY, new TableField[] { Household.HOUSEHOLD.ID }, true);
    public static final ForeignKey<HouseholdMembersRecord, UserRecord> HOUSEHOLD_MEMBERS__FK_HOUSEHOLD_INVITED_BY = Internal.createForeignKey(HouseholdMembers.HOUSEHOLD_MEMBERS, DSL.name("fk_household_invited_by"), new TableField[] { HouseholdMembers.HOUSEHOLD_MEMBERS.INVITED_BY_ID }, Keys.USER_PKEY, new TableField[] { User.USER.ID }, true);
    public static final ForeignKey<HouseholdMembersRecord, UserRecord> HOUSEHOLD_MEMBERS__FK_HOUSEHOLD_USER = Internal.createForeignKey(HouseholdMembers.HOUSEHOLD_MEMBERS, DSL.name("fk_household_user"), new TableField[] { HouseholdMembers.HOUSEHOLD_MEMBERS.USER_ID }, Keys.USER_PKEY, new TableField[] { User.USER.ID }, true);
    public static final ForeignKey<MonthlyHistoryRecord, CategoryRecord> MONTHLY_HISTORY__FK_MONTHLY_HISTORY_CATEGORY = Internal.createForeignKey(MonthlyHistory.MONTHLY_HISTORY, DSL.name("fk_monthly_history_category"), new TableField[] { MonthlyHistory.MONTHLY_HISTORY.CATEGORY_ID }, Keys.CATEGORY_PKEY, new TableField[] { Category.CATEGORY.ID }, true);
    public static final ForeignKey<RecurringExpenseRecord, CategoryRecord> RECURRING_EXPENSE__FK_RECURRING_EXPENSE_CATEGORY = Internal.createForeignKey(RecurringExpense.RECURRING_EXPENSE, DSL.name("fk_recurring_expense_category"), new TableField[] { RecurringExpense.RECURRING_EXPENSE.CATEGORY_ID }, Keys.CATEGORY_PKEY, new TableField[] { Category.CATEGORY.ID }, true);
    public static final ForeignKey<YearlyHistoryRecord, CategoryRecord> YEARLY_HISTORY__FK_YEARLY_HISTORY_CATEGORY = Internal.createForeignKey(YearlyHistory.YEARLY_HISTORY, DSL.name("fk_yearly_history_category"), new TableField[] { YearlyHistory.YEARLY_HISTORY.CATEGORY_ID }, Keys.CATEGORY_PKEY, new TableField[] { Category.CATEGORY.ID }, true);
}
