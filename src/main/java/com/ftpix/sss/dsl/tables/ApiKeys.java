/*
 * This file is generated by jOOQ.
 */
package com.ftpix.sss.dsl.tables;


import com.ftpix.sss.dsl.Indexes;
import com.ftpix.sss.dsl.Keys;
import com.ftpix.sss.dsl.PUBLIC;
import com.ftpix.sss.dsl.tables.User.UserPath;
import com.ftpix.sss.dsl.tables.records.ApiKeysRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ApiKeys extends TableImpl<ApiKeysRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.api_keys</code>
     */
    public static final ApiKeys API_KEYS = new ApiKeys();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ApiKeysRecord> getRecordType() {
        return ApiKeysRecord.class;
    }

    /**
     * The column <code>public.api_keys.id</code>.
     */
    public final TableField<ApiKeysRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(55).nullable(false).defaultValue(DSL.field(DSL.raw("gen_random_uuid()"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.api_keys.keyname</code>.
     */
    public final TableField<ApiKeysRecord, String> KEYNAME = createField(DSL.name("keyname"), SQLDataType.VARCHAR(55), this, "");

    /**
     * The column <code>public.api_keys.user_id</code>.
     */
    public final TableField<ApiKeysRecord, String> USER_ID = createField(DSL.name("user_id"), SQLDataType.VARCHAR(55), this, "");

    /**
     * The column <code>public.api_keys.timecreated</code>.
     */
    public final TableField<ApiKeysRecord, Long> TIMECREATED = createField(DSL.name("timecreated"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.api_keys.lastused</code>.
     */
    public final TableField<ApiKeysRecord, Long> LASTUSED = createField(DSL.name("lastused"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.api_keys.expirydate</code>.
     */
    public final TableField<ApiKeysRecord, Long> EXPIRYDATE = createField(DSL.name("expirydate"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.api_keys.apikey</code>.
     */
    public final TableField<ApiKeysRecord, String> APIKEY = createField(DSL.name("apikey"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.api_keys.apikeyhash</code>.
     */
    public final TableField<ApiKeysRecord, String> APIKEYHASH = createField(DSL.name("apikeyhash"), SQLDataType.CLOB.nullable(false), this, "");

    private ApiKeys(Name alias, Table<ApiKeysRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ApiKeys(Name alias, Table<ApiKeysRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.api_keys</code> table reference
     */
    public ApiKeys(String alias) {
        this(DSL.name(alias), API_KEYS);
    }

    /**
     * Create an aliased <code>public.api_keys</code> table reference
     */
    public ApiKeys(Name alias) {
        this(alias, API_KEYS);
    }

    /**
     * Create a <code>public.api_keys</code> table reference
     */
    public ApiKeys() {
        this(DSL.name("api_keys"), null);
    }

    public <O extends Record> ApiKeys(Table<O> path, ForeignKey<O, ApiKeysRecord> childPath, InverseForeignKey<O, ApiKeysRecord> parentPath) {
        super(path, childPath, parentPath, API_KEYS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ApiKeysPath extends ApiKeys implements Path<ApiKeysRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ApiKeysPath(Table<O> path, ForeignKey<O, ApiKeysRecord> childPath, InverseForeignKey<O, ApiKeysRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ApiKeysPath(Name alias, Table<ApiKeysRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ApiKeysPath as(String alias) {
            return new ApiKeysPath(DSL.name(alias), this);
        }

        @Override
        public ApiKeysPath as(Name alias) {
            return new ApiKeysPath(alias, this);
        }

        @Override
        public ApiKeysPath as(Table<?> alias) {
            return new ApiKeysPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PUBLIC.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.API_KEYS_HASH, Indexes.UNIQUE_API_KEY);
    }

    @Override
    public UniqueKey<ApiKeysRecord> getPrimaryKey() {
        return Keys.API_KEYS_PKEY;
    }

    @Override
    public List<ForeignKey<ApiKeysRecord, ?>> getReferences() {
        return Arrays.asList(Keys.API_KEYS__FK_API_KEY_USER);
    }

    private transient UserPath _user;

    /**
     * Get the implicit join path to the <code>public.user</code> table.
     */
    public UserPath user() {
        if (_user == null)
            _user = new UserPath(this, Keys.API_KEYS__FK_API_KEY_USER, null);

        return _user;
    }

    @Override
    public ApiKeys as(String alias) {
        return new ApiKeys(DSL.name(alias), this);
    }

    @Override
    public ApiKeys as(Name alias) {
        return new ApiKeys(alias, this);
    }

    @Override
    public ApiKeys as(Table<?> alias) {
        return new ApiKeys(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ApiKeys rename(String name) {
        return new ApiKeys(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ApiKeys rename(Name name) {
        return new ApiKeys(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ApiKeys rename(Table<?> name) {
        return new ApiKeys(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ApiKeys where(Condition condition) {
        return new ApiKeys(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ApiKeys where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ApiKeys where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ApiKeys where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ApiKeys where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ApiKeys where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ApiKeys where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ApiKeys where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ApiKeys whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ApiKeys whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
