/*
 * This file is generated by jOOQ.
 */
package com.ftpix.sss.dsl.tables;


import com.ftpix.sss.dsl.Indexes;
import com.ftpix.sss.dsl.Keys;
import com.ftpix.sss.dsl.PUBLIC;
import com.ftpix.sss.dsl.tables.Category.CategoryPath;
import com.ftpix.sss.dsl.tables.Files.FilesPath;
import com.ftpix.sss.dsl.tables.records.ExpenseRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Expense extends TableImpl<ExpenseRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.expense</code>
     */
    public static final Expense EXPENSE = new Expense();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ExpenseRecord> getRecordType() {
        return ExpenseRecord.class;
    }

    /**
     * The column <code>public.expense.id</code>.
     */
    public final TableField<ExpenseRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.expense.amount</code>.
     */
    public final TableField<ExpenseRecord, Double> AMOUNT = createField(DSL.name("amount"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.expense.category_id</code>.
     */
    public final TableField<ExpenseRecord, Long> CATEGORY_ID = createField(DSL.name("category_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.expense.date</code>.
     */
    public final TableField<ExpenseRecord, String> DATE = createField(DSL.name("date"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.expense.type</code>.
     */
    public final TableField<ExpenseRecord, Integer> TYPE = createField(DSL.name("type"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.expense.income</code>.
     */
    public final TableField<ExpenseRecord, Integer> INCOME = createField(DSL.name("income"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.expense.latitude</code>.
     */
    public final TableField<ExpenseRecord, Double> LATITUDE = createField(DSL.name("latitude"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.expense.longitude</code>.
     */
    public final TableField<ExpenseRecord, Double> LONGITUDE = createField(DSL.name("longitude"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.expense.note</code>.
     */
    public final TableField<ExpenseRecord, String> NOTE = createField(DSL.name("note"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.expense.time</code>.
     */
    public final TableField<ExpenseRecord, String> TIME = createField(DSL.name("time"), SQLDataType.VARCHAR(5), this, "");

    /**
     * The column <code>public.expense.timestamp</code>.
     */
    public final TableField<ExpenseRecord, Long> TIMESTAMP = createField(DSL.name("timestamp"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.expense.timecreated</code>.
     */
    public final TableField<ExpenseRecord, Long> TIMECREATED = createField(DSL.name("timecreated"), SQLDataType.BIGINT, this, "");

    private Expense(Name alias, Table<ExpenseRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Expense(Name alias, Table<ExpenseRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.expense</code> table reference
     */
    public Expense(String alias) {
        this(DSL.name(alias), EXPENSE);
    }

    /**
     * Create an aliased <code>public.expense</code> table reference
     */
    public Expense(Name alias) {
        this(alias, EXPENSE);
    }

    /**
     * Create a <code>public.expense</code> table reference
     */
    public Expense() {
        this(DSL.name("expense"), null);
    }

    public <O extends Record> Expense(Table<O> path, ForeignKey<O, ExpenseRecord> childPath, InverseForeignKey<O, ExpenseRecord> parentPath) {
        super(path, childPath, parentPath, EXPENSE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ExpensePath extends Expense implements Path<ExpenseRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ExpensePath(Table<O> path, ForeignKey<O, ExpenseRecord> childPath, InverseForeignKey<O, ExpenseRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ExpensePath(Name alias, Table<ExpenseRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ExpensePath as(String alias) {
            return new ExpensePath(DSL.name(alias), this);
        }

        @Override
        public ExpensePath as(Name alias) {
            return new ExpensePath(alias, this);
        }

        @Override
        public ExpensePath as(Table<?> alias) {
            return new ExpensePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PUBLIC.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.EXPENSE_CATEGORY_TIME);
    }

    @Override
    public Identity<ExpenseRecord, Long> getIdentity() {
        return (Identity<ExpenseRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ExpenseRecord> getPrimaryKey() {
        return Keys.EXPENSE_PKEY;
    }

    @Override
    public List<ForeignKey<ExpenseRecord, ?>> getReferences() {
        return Arrays.asList(Keys.EXPENSE__FK_EXPENSE_CATEGORY);
    }

    private transient CategoryPath _category;

    /**
     * Get the implicit join path to the <code>public.category</code> table.
     */
    public CategoryPath category() {
        if (_category == null)
            _category = new CategoryPath(this, Keys.EXPENSE__FK_EXPENSE_CATEGORY, null);

        return _category;
    }

    private transient FilesPath _files;

    /**
     * Get the implicit to-many join path to the <code>public.files</code> table
     */
    public FilesPath files() {
        if (_files == null)
            _files = new FilesPath(this, null, Keys.FILES__FK_SSS_FILE_EXPENSE.getInverseKey());

        return _files;
    }

    @Override
    public Expense as(String alias) {
        return new Expense(DSL.name(alias), this);
    }

    @Override
    public Expense as(Name alias) {
        return new Expense(alias, this);
    }

    @Override
    public Expense as(Table<?> alias) {
        return new Expense(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Expense rename(String name) {
        return new Expense(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Expense rename(Name name) {
        return new Expense(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Expense rename(Table<?> name) {
        return new Expense(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Expense where(Condition condition) {
        return new Expense(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Expense where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Expense where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Expense where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Expense where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Expense where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Expense where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Expense where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Expense whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Expense whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
