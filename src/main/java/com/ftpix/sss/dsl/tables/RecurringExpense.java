/*
 * This file is generated by jOOQ.
 */
package com.ftpix.sss.dsl.tables;


import com.ftpix.sss.dsl.Keys;
import com.ftpix.sss.dsl.PUBLIC;
import com.ftpix.sss.dsl.tables.records.RecurringExpenseRecord;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class RecurringExpense extends TableImpl<RecurringExpenseRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.recurring_expense</code>
     */
    public static final RecurringExpense RECURRING_EXPENSE = new RecurringExpense();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RecurringExpenseRecord> getRecordType() {
        return RecurringExpenseRecord.class;
    }

    /**
     * The column <code>public.recurring_expense.id</code>.
     */
    public final TableField<RecurringExpenseRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.recurring_expense.name</code>.
     */
    public final TableField<RecurringExpenseRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.recurring_expense.category_id</code>.
     */
    public final TableField<RecurringExpenseRecord, Long> CATEGORY_ID = createField(DSL.name("category_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.recurring_expense.type</code>.
     */
    public final TableField<RecurringExpenseRecord, Integer> TYPE = createField(DSL.name("type"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.recurring_expense.type_param</code>.
     */
    public final TableField<RecurringExpenseRecord, Integer> TYPE_PARAM = createField(DSL.name("type_param"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.recurring_expense.last_occurrence</code>.
     */
    public final TableField<RecurringExpenseRecord, String> LAST_OCCURRENCE = createField(DSL.name("last_occurrence"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.recurring_expense.next_occurrence</code>.
     */
    public final TableField<RecurringExpenseRecord, String> NEXT_OCCURRENCE = createField(DSL.name("next_occurrence"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.recurring_expense.amount</code>.
     */
    public final TableField<RecurringExpenseRecord, Double> AMOUNT = createField(DSL.name("amount"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.recurring_expense.income</code>.
     */
    public final TableField<RecurringExpenseRecord, Integer> INCOME = createField(DSL.name("income"), SQLDataType.INTEGER, this, "");

    private RecurringExpense(Name alias, Table<RecurringExpenseRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private RecurringExpense(Name alias, Table<RecurringExpenseRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.recurring_expense</code> table reference
     */
    public RecurringExpense(String alias) {
        this(DSL.name(alias), RECURRING_EXPENSE);
    }

    /**
     * Create an aliased <code>public.recurring_expense</code> table reference
     */
    public RecurringExpense(Name alias) {
        this(alias, RECURRING_EXPENSE);
    }

    /**
     * Create a <code>public.recurring_expense</code> table reference
     */
    public RecurringExpense() {
        this(DSL.name("recurring_expense"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PUBLIC.PUBLIC;
    }

    @Override
    public Identity<RecurringExpenseRecord, Long> getIdentity() {
        return (Identity<RecurringExpenseRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<RecurringExpenseRecord> getPrimaryKey() {
        return Keys.RECURRING_EXPENSE_PKEY;
    }

    @Override
    public RecurringExpense as(String alias) {
        return new RecurringExpense(DSL.name(alias), this);
    }

    @Override
    public RecurringExpense as(Name alias) {
        return new RecurringExpense(alias, this);
    }

    @Override
    public RecurringExpense as(Table<?> alias) {
        return new RecurringExpense(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public RecurringExpense rename(String name) {
        return new RecurringExpense(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RecurringExpense rename(Name name) {
        return new RecurringExpense(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public RecurringExpense rename(Table<?> name) {
        return new RecurringExpense(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RecurringExpense where(Condition condition) {
        return new RecurringExpense(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RecurringExpense where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RecurringExpense where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RecurringExpense where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RecurringExpense where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RecurringExpense where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RecurringExpense where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RecurringExpense where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RecurringExpense whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RecurringExpense whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
