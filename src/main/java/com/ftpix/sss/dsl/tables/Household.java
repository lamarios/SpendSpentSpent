/*
 * This file is generated by jOOQ.
 */
package com.ftpix.sss.dsl.tables;


import com.ftpix.sss.dsl.Keys;
import com.ftpix.sss.dsl.PUBLIC;
import com.ftpix.sss.dsl.tables.HouseholdMembers.HouseholdMembersPath;
import com.ftpix.sss.dsl.tables.records.HouseholdRecord;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Household extends TableImpl<HouseholdRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.household</code>
     */
    public static final Household HOUSEHOLD = new Household();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<HouseholdRecord> getRecordType() {
        return HouseholdRecord.class;
    }

    /**
     * The column <code>public.household.id</code>.
     */
    public final TableField<HouseholdRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(55).nullable(false).defaultValue(DSL.field(DSL.raw("gen_random_uuid()"), SQLDataType.VARCHAR)), this, "");

    private Household(Name alias, Table<HouseholdRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Household(Name alias, Table<HouseholdRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.household</code> table reference
     */
    public Household(String alias) {
        this(DSL.name(alias), HOUSEHOLD);
    }

    /**
     * Create an aliased <code>public.household</code> table reference
     */
    public Household(Name alias) {
        this(alias, HOUSEHOLD);
    }

    /**
     * Create a <code>public.household</code> table reference
     */
    public Household() {
        this(DSL.name("household"), null);
    }

    public <O extends Record> Household(Table<O> path, ForeignKey<O, HouseholdRecord> childPath, InverseForeignKey<O, HouseholdRecord> parentPath) {
        super(path, childPath, parentPath, HOUSEHOLD);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class HouseholdPath extends Household implements Path<HouseholdRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> HouseholdPath(Table<O> path, ForeignKey<O, HouseholdRecord> childPath, InverseForeignKey<O, HouseholdRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private HouseholdPath(Name alias, Table<HouseholdRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public HouseholdPath as(String alias) {
            return new HouseholdPath(DSL.name(alias), this);
        }

        @Override
        public HouseholdPath as(Name alias) {
            return new HouseholdPath(alias, this);
        }

        @Override
        public HouseholdPath as(Table<?> alias) {
            return new HouseholdPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PUBLIC.PUBLIC;
    }

    @Override
    public UniqueKey<HouseholdRecord> getPrimaryKey() {
        return Keys.HOUSEHOLD_PKEY;
    }

    private transient HouseholdMembersPath _householdMembers;

    /**
     * Get the implicit to-many join path to the
     * <code>public.household_members</code> table
     */
    public HouseholdMembersPath householdMembers() {
        if (_householdMembers == null)
            _householdMembers = new HouseholdMembersPath(this, null, Keys.HOUSEHOLD_MEMBERS__FK_HOUSEHOLD.getInverseKey());

        return _householdMembers;
    }

    @Override
    public Household as(String alias) {
        return new Household(DSL.name(alias), this);
    }

    @Override
    public Household as(Name alias) {
        return new Household(alias, this);
    }

    @Override
    public Household as(Table<?> alias) {
        return new Household(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Household rename(String name) {
        return new Household(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Household rename(Name name) {
        return new Household(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Household rename(Table<?> name) {
        return new Household(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Household where(Condition condition) {
        return new Household(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Household where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Household where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Household where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Household where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Household where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Household where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Household where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Household whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Household whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
