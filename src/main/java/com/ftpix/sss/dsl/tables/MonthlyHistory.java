/*
 * This file is generated by jOOQ.
 */
package com.ftpix.sss.dsl.tables;


import com.ftpix.sss.dsl.PUBLIC;
import com.ftpix.sss.dsl.tables.records.MonthlyHistoryRecord;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class MonthlyHistory extends TableImpl<MonthlyHistoryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.monthly_history</code>
     */
    public static final MonthlyHistory MONTHLY_HISTORY = new MonthlyHistory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MonthlyHistoryRecord> getRecordType() {
        return MonthlyHistoryRecord.class;
    }

    /**
     * The column <code>public.monthly_history.category_id</code>.
     */
    public final TableField<MonthlyHistoryRecord, Long> CATEGORY_ID = createField(DSL.name("category_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.monthly_history.date</code>.
     */
    public final TableField<MonthlyHistoryRecord, Integer> DATE = createField(DSL.name("date"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.monthly_history.total</code>.
     */
    public final TableField<MonthlyHistoryRecord, Double> TOTAL = createField(DSL.name("total"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.monthly_history.expenses</code>.
     */
    public final TableField<MonthlyHistoryRecord, Long> EXPENSES = createField(DSL.name("expenses"), SQLDataType.BIGINT, this, "");

    private MonthlyHistory(Name alias, Table<MonthlyHistoryRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private MonthlyHistory(Name alias, Table<MonthlyHistoryRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("""
        create view "monthly_history" as  SELECT category_id,
          (to_char((to_timestamp((("timestamp" / 1000))::double precision) AT TIME ZONE 'Asia/Kuala_Lumpur'::text), 'YYYYMM'::text))::integer AS date,
          sum(amount) AS total,
          count(*) AS expenses
         FROM expense
        GROUP BY category_id, (to_char((to_timestamp((("timestamp" / 1000))::double precision) AT TIME ZONE 'Asia/Kuala_Lumpur'::text), 'YYYYMM'::text))::integer;
        """), where);
    }

    /**
     * Create an aliased <code>public.monthly_history</code> table reference
     */
    public MonthlyHistory(String alias) {
        this(DSL.name(alias), MONTHLY_HISTORY);
    }

    /**
     * Create an aliased <code>public.monthly_history</code> table reference
     */
    public MonthlyHistory(Name alias) {
        this(alias, MONTHLY_HISTORY);
    }

    /**
     * Create a <code>public.monthly_history</code> table reference
     */
    public MonthlyHistory() {
        this(DSL.name("monthly_history"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PUBLIC.PUBLIC;
    }

    @Override
    public MonthlyHistory as(String alias) {
        return new MonthlyHistory(DSL.name(alias), this);
    }

    @Override
    public MonthlyHistory as(Name alias) {
        return new MonthlyHistory(alias, this);
    }

    @Override
    public MonthlyHistory as(Table<?> alias) {
        return new MonthlyHistory(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public MonthlyHistory rename(String name) {
        return new MonthlyHistory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MonthlyHistory rename(Name name) {
        return new MonthlyHistory(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public MonthlyHistory rename(Table<?> name) {
        return new MonthlyHistory(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MonthlyHistory where(Condition condition) {
        return new MonthlyHistory(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MonthlyHistory where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MonthlyHistory where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MonthlyHistory where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MonthlyHistory where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MonthlyHistory where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MonthlyHistory where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MonthlyHistory where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MonthlyHistory whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MonthlyHistory whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
