/*
 * This file is generated by jOOQ.
 */
package com.ftpix.sss.dsl.tables;


import com.ftpix.sss.dsl.Keys;
import com.ftpix.sss.dsl.PUBLIC;
import com.ftpix.sss.dsl.tables.Household.HouseholdPath;
import com.ftpix.sss.dsl.tables.User.UserPath;
import com.ftpix.sss.dsl.tables.records.HouseholdMembersRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class HouseholdMembers extends TableImpl<HouseholdMembersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.household_members</code>
     */
    public static final HouseholdMembers HOUSEHOLD_MEMBERS = new HouseholdMembers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<HouseholdMembersRecord> getRecordType() {
        return HouseholdMembersRecord.class;
    }

    /**
     * The column <code>public.household_members.id</code>.
     */
    public final TableField<HouseholdMembersRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(55).nullable(false).defaultValue(DSL.field(DSL.raw("gen_random_uuid()"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.household_members.user_id</code>.
     */
    public final TableField<HouseholdMembersRecord, String> USER_ID = createField(DSL.name("user_id"), SQLDataType.VARCHAR(55), this, "");

    /**
     * The column <code>public.household_members.invited_by_id</code>.
     */
    public final TableField<HouseholdMembersRecord, String> INVITED_BY_ID = createField(DSL.name("invited_by_id"), SQLDataType.VARCHAR(55), this, "");

    /**
     * The column <code>public.household_members.status</code>.
     */
    public final TableField<HouseholdMembersRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(55).nullable(false), this, "");

    /**
     * The column <code>public.household_members.admin</code>.
     */
    public final TableField<HouseholdMembersRecord, Boolean> ADMIN = createField(DSL.name("admin"), SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.household_members.color</code>.
     */
    public final TableField<HouseholdMembersRecord, String> COLOR = createField(DSL.name("color"), SQLDataType.VARCHAR(55).nullable(false), this, "");

    /**
     * The column <code>public.household_members.household_id</code>.
     */
    public final TableField<HouseholdMembersRecord, String> HOUSEHOLD_ID = createField(DSL.name("household_id"), SQLDataType.VARCHAR(55), this, "");

    private HouseholdMembers(Name alias, Table<HouseholdMembersRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private HouseholdMembers(Name alias, Table<HouseholdMembersRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.household_members</code> table reference
     */
    public HouseholdMembers(String alias) {
        this(DSL.name(alias), HOUSEHOLD_MEMBERS);
    }

    /**
     * Create an aliased <code>public.household_members</code> table reference
     */
    public HouseholdMembers(Name alias) {
        this(alias, HOUSEHOLD_MEMBERS);
    }

    /**
     * Create a <code>public.household_members</code> table reference
     */
    public HouseholdMembers() {
        this(DSL.name("household_members"), null);
    }

    public <O extends Record> HouseholdMembers(Table<O> path, ForeignKey<O, HouseholdMembersRecord> childPath, InverseForeignKey<O, HouseholdMembersRecord> parentPath) {
        super(path, childPath, parentPath, HOUSEHOLD_MEMBERS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class HouseholdMembersPath extends HouseholdMembers implements Path<HouseholdMembersRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> HouseholdMembersPath(Table<O> path, ForeignKey<O, HouseholdMembersRecord> childPath, InverseForeignKey<O, HouseholdMembersRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private HouseholdMembersPath(Name alias, Table<HouseholdMembersRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public HouseholdMembersPath as(String alias) {
            return new HouseholdMembersPath(DSL.name(alias), this);
        }

        @Override
        public HouseholdMembersPath as(Name alias) {
            return new HouseholdMembersPath(alias, this);
        }

        @Override
        public HouseholdMembersPath as(Table<?> alias) {
            return new HouseholdMembersPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PUBLIC.PUBLIC;
    }

    @Override
    public UniqueKey<HouseholdMembersRecord> getPrimaryKey() {
        return Keys.HOUSEHOLD_MEMBERS_PKEY;
    }

    @Override
    public List<ForeignKey<HouseholdMembersRecord, ?>> getReferences() {
        return Arrays.asList(Keys.HOUSEHOLD_MEMBERS__FK_HOUSEHOLD, Keys.HOUSEHOLD_MEMBERS__FK_HOUSEHOLD_INVITED_BY, Keys.HOUSEHOLD_MEMBERS__FK_HOUSEHOLD_USER);
    }

    private transient HouseholdPath _household;

    /**
     * Get the implicit join path to the <code>public.household</code> table.
     */
    public HouseholdPath household() {
        if (_household == null)
            _household = new HouseholdPath(this, Keys.HOUSEHOLD_MEMBERS__FK_HOUSEHOLD, null);

        return _household;
    }

    private transient UserPath _fkHouseholdInvitedBy;

    /**
     * Get the implicit join path to the <code>public.user</code> table, via the
     * <code>fk_household_invited_by</code> key.
     */
    public UserPath fkHouseholdInvitedBy() {
        if (_fkHouseholdInvitedBy == null)
            _fkHouseholdInvitedBy = new UserPath(this, Keys.HOUSEHOLD_MEMBERS__FK_HOUSEHOLD_INVITED_BY, null);

        return _fkHouseholdInvitedBy;
    }

    private transient UserPath _fkHouseholdUser;

    /**
     * Get the implicit join path to the <code>public.user</code> table, via the
     * <code>fk_household_user</code> key.
     */
    public UserPath fkHouseholdUser() {
        if (_fkHouseholdUser == null)
            _fkHouseholdUser = new UserPath(this, Keys.HOUSEHOLD_MEMBERS__FK_HOUSEHOLD_USER, null);

        return _fkHouseholdUser;
    }

    @Override
    public HouseholdMembers as(String alias) {
        return new HouseholdMembers(DSL.name(alias), this);
    }

    @Override
    public HouseholdMembers as(Name alias) {
        return new HouseholdMembers(alias, this);
    }

    @Override
    public HouseholdMembers as(Table<?> alias) {
        return new HouseholdMembers(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public HouseholdMembers rename(String name) {
        return new HouseholdMembers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public HouseholdMembers rename(Name name) {
        return new HouseholdMembers(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public HouseholdMembers rename(Table<?> name) {
        return new HouseholdMembers(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public HouseholdMembers where(Condition condition) {
        return new HouseholdMembers(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public HouseholdMembers where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public HouseholdMembers where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public HouseholdMembers where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public HouseholdMembers where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public HouseholdMembers where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public HouseholdMembers where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public HouseholdMembers where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public HouseholdMembers whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public HouseholdMembers whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
