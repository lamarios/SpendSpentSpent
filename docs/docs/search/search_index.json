{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"About SpendSpentSpent SpendSpentSpent is an expense tracker built to make logging expenses effortless. It\u2019s self-hosted, lightning fast, and gives you clear insights into your spending without distractions. Features \ud83d\ude80 Fast & Simple : Add an expense in seconds, without complicated menus or forms. \ud83d\udcca Clear Insights : See where your money goes with charts and summaries that make sense. \ud83d\udda5\ufe0f Self-Hosted : You\u2019re in full control. Host the app yourself, keep your data safe, and customize as you like. \ud83c\udfe0 Shared Households: Create a household and invite family or roommates, everyone can see shared expenses to keep budgets transparent and coordinated. \ud83e\udd16 Smart Categorization : Optional AI-powered analysis helps suggest the right category by looking at receipts or pictures of your purchases. \ud83d\udd0c MCP Integration: Comes with a built-in MCP server so LLM-powered tools can access and analyze your expense data securely and seamlessly. Screenshots","title":"About SpendSpentSpent"},{"location":"#about-spendspentspent","text":"SpendSpentSpent is an expense tracker built to make logging expenses effortless. It\u2019s self-hosted, lightning fast, and gives you clear insights into your spending without distractions.","title":"About SpendSpentSpent"},{"location":"#features","text":"\ud83d\ude80 Fast & Simple : Add an expense in seconds, without complicated menus or forms. \ud83d\udcca Clear Insights : See where your money goes with charts and summaries that make sense. \ud83d\udda5\ufe0f Self-Hosted : You\u2019re in full control. Host the app yourself, keep your data safe, and customize as you like. \ud83c\udfe0 Shared Households: Create a household and invite family or roommates, everyone can see shared expenses to keep budgets transparent and coordinated. \ud83e\udd16 Smart Categorization : Optional AI-powered analysis helps suggest the right category by looking at receipts or pictures of your purchases. \ud83d\udd0c MCP Integration: Comes with a built-in MCP server so LLM-powered tools can access and analyze your expense data securely and seamlessly.","title":"Features"},{"location":"#screenshots","text":"","title":"Screenshots"},{"location":"1-installation/","text":"Installation Docker This is the easiest way to run SSS There is a set of required environment variable. Check the configuration documentation. With docker compose: sss: container_name: sss image: gonzague/spendspentspent restart: unless-stopped ports: - \"9001:9001\" volumes: - /etc/localtime:/etc/localtime:ro - /some/path:/app-files # Where to store the files environment: SALT: somerandomstring #once set DO NOT EVER CHANGE IT DB_PATH: \"jdbc:postgresql://postgres-sss:5432/sss\" DB_USER: \"postgres\" DB_PASSWORD: \"postgres\" TIMEZONE: \"Europe/Paris\" postgres-sss: container_name: postgres-sss image: postgres:17 environment: POSTGRES_PASSWORD: postgres POSTGRES_USER: postgres POSTGRES_DB: sss TIMEZONE: Europe/Paris volumes: - ./sss/db:/var/lib/postgresql/data From the JAR file You will need to have Java 21 to be installed on your machine to be able to run SSS SALT=somerandomestring DB_PATH=<jdbc url> DB_USER=xxx DB_PASSWORD=yyyy TIMEZONE=Europe/Paris java -Dserver.port=9001 -jar /app/SpendSpentSpent.jar Update Docker docker pull gonzague/spendspentspent and restart your container Jar File Download the lastest JAR file from the release page and run it the same way. Accessing the app If you followed the example above, the app will be available on the port 9001 .","title":"Installation"},{"location":"1-installation/#installation","text":"","title":"Installation"},{"location":"1-installation/#docker","text":"This is the easiest way to run SSS There is a set of required environment variable. Check the configuration documentation. With docker compose: sss: container_name: sss image: gonzague/spendspentspent restart: unless-stopped ports: - \"9001:9001\" volumes: - /etc/localtime:/etc/localtime:ro - /some/path:/app-files # Where to store the files environment: SALT: somerandomstring #once set DO NOT EVER CHANGE IT DB_PATH: \"jdbc:postgresql://postgres-sss:5432/sss\" DB_USER: \"postgres\" DB_PASSWORD: \"postgres\" TIMEZONE: \"Europe/Paris\" postgres-sss: container_name: postgres-sss image: postgres:17 environment: POSTGRES_PASSWORD: postgres POSTGRES_USER: postgres POSTGRES_DB: sss TIMEZONE: Europe/Paris volumes: - ./sss/db:/var/lib/postgresql/data","title":"Docker"},{"location":"1-installation/#from-the-jar-file","text":"You will need to have Java 21 to be installed on your machine to be able to run SSS SALT=somerandomestring DB_PATH=<jdbc url> DB_USER=xxx DB_PASSWORD=yyyy TIMEZONE=Europe/Paris java -Dserver.port=9001 -jar /app/SpendSpentSpent.jar","title":"From the JAR file"},{"location":"1-installation/#update","text":"","title":"Update"},{"location":"1-installation/#docker_1","text":"docker pull gonzague/spendspentspent and restart your container","title":"Docker"},{"location":"1-installation/#jar-file","text":"Download the lastest JAR file from the release page and run it the same way.","title":"Jar File"},{"location":"1-installation/#accessing-the-app","text":"If you followed the example above, the app will be available on the port 9001 .","title":"Accessing the app"},{"location":"2-configuration/","text":"Configuration Environment variables Name Default Required Comments SALT (none) Yes Once this is set, do not ever change it. DB_PATH (none) Yes A full postgres JDBC connection url . Example: jdbc:postgresql://localhost:5432/sss DB_USER (none) Yes DB_PASSWORD (none) Yes TIMEZONE (none) Yes The timezone of the server (ex: Europe/Paris) from the tz database ALLOW_SIGNUP 0 No 1 = allow signups, 0 = Do not allow signups ANNOUNCEMENT_MESSAGE (none) No Show a message on the login screen, ex: ANNOUNCEMENT_MESSAGE=\"Welcome to my SpendSpentSpent instance\". See demo instance to see what it looks like FILES_PATH ./files No Where to store the pictures uploaded by the users Email SMTP environment variables are necessary if you want to enable the forgot password function and recurring expense notification emails. Name Default Required (based on if you want SMTP services enabled) Comments ROOT_URL http://localhost:8080 No The base URL used in the links in email sent to users SMTP_HOST (none) Yes SMTP_PORT 0 Yes SMTP_USERNAME (none) No SMTP_PASSWORD (none) No SMTP_FROM (none) Yes Who will be the sender of the email SMTP_TRANSPORT_STRATEGY SMTP Yes Possible values: SMTP, SMTPS, SMTP_TLS AI (ollama / openai) SSS supports analyzing images using ollama or open ai (or a compatible server) to find prices or tags about images attached to an expense. The default models tested well with a RX6600XT GPU (8GB VRAM). Name Default Comments OLLAMA_API_URL (none) The url of the ollama instance. Do not use together with OPENAI_API_URL OLLAMA_API_KEY (none) API Key to talk to the ollama server OPENAI_API_URL (none) The url of the open ai compatible instance. Do not use together with OPENAI_API_URL OPENAI_API_KEY (none) API Key to talk to the open ai compatible server AI_VISION_MODEL qwen2.5vl:7b Which vision model to use. This model will be used to generate picture description AI_TEXT_MODEL qwen3:8b Which text model to use. This model will take the description and generate tags and find the best expense category for a picture OIDC SSS Supports SSO by implementing OIDC. You will need to set up your OIDC client as a Public Client and enable PKCE. Here are the used callback urls: com.spendspentspent.app:/oidcRedirect https://your.spendspentsspent-domain.com/redirect.html Name Default Required Comments OIDC_DISCOVERY_URL (none) Yes The discovery URL of your OIDC provider https://id.example.com/.well-known/openid-configuration OIDC_CLIENT_ID (none) Yes Your OIDC client id OIDC_AUTO_SIGNUP_USERS false No Whether to automatically sign up unknown users OIDC_NAME SSO no Name of your provider to display on the UI","title":"Configuration"},{"location":"2-configuration/#configuration","text":"","title":"Configuration"},{"location":"2-configuration/#environment-variables","text":"Name Default Required Comments SALT (none) Yes Once this is set, do not ever change it. DB_PATH (none) Yes A full postgres JDBC connection url . Example: jdbc:postgresql://localhost:5432/sss DB_USER (none) Yes DB_PASSWORD (none) Yes TIMEZONE (none) Yes The timezone of the server (ex: Europe/Paris) from the tz database ALLOW_SIGNUP 0 No 1 = allow signups, 0 = Do not allow signups ANNOUNCEMENT_MESSAGE (none) No Show a message on the login screen, ex: ANNOUNCEMENT_MESSAGE=\"Welcome to my SpendSpentSpent instance\". See demo instance to see what it looks like FILES_PATH ./files No Where to store the pictures uploaded by the users","title":"Environment variables"},{"location":"2-configuration/#email","text":"SMTP environment variables are necessary if you want to enable the forgot password function and recurring expense notification emails. Name Default Required (based on if you want SMTP services enabled) Comments ROOT_URL http://localhost:8080 No The base URL used in the links in email sent to users SMTP_HOST (none) Yes SMTP_PORT 0 Yes SMTP_USERNAME (none) No SMTP_PASSWORD (none) No SMTP_FROM (none) Yes Who will be the sender of the email SMTP_TRANSPORT_STRATEGY SMTP Yes Possible values: SMTP, SMTPS, SMTP_TLS","title":"Email"},{"location":"2-configuration/#ai-ollama-openai","text":"SSS supports analyzing images using ollama or open ai (or a compatible server) to find prices or tags about images attached to an expense. The default models tested well with a RX6600XT GPU (8GB VRAM). Name Default Comments OLLAMA_API_URL (none) The url of the ollama instance. Do not use together with OPENAI_API_URL OLLAMA_API_KEY (none) API Key to talk to the ollama server OPENAI_API_URL (none) The url of the open ai compatible instance. Do not use together with OPENAI_API_URL OPENAI_API_KEY (none) API Key to talk to the open ai compatible server AI_VISION_MODEL qwen2.5vl:7b Which vision model to use. This model will be used to generate picture description AI_TEXT_MODEL qwen3:8b Which text model to use. This model will take the description and generate tags and find the best expense category for a picture","title":"AI (ollama / openai)"},{"location":"2-configuration/#oidc","text":"SSS Supports SSO by implementing OIDC. You will need to set up your OIDC client as a Public Client and enable PKCE. Here are the used callback urls: com.spendspentspent.app:/oidcRedirect https://your.spendspentsspent-domain.com/redirect.html Name Default Required Comments OIDC_DISCOVERY_URL (none) Yes The discovery URL of your OIDC provider https://id.example.com/.well-known/openid-configuration OIDC_CLIENT_ID (none) Yes Your OIDC client id OIDC_AUTO_SIGNUP_USERS false No Whether to automatically sign up unknown users OIDC_NAME SSO no Name of your provider to display on the UI","title":"OIDC"},{"location":"3-api/","text":"API If you ever want to integrate with SSS via API you can. OpenAPI The OpenAPI descriptions are here: http://localhost:8080/v3/api-docs Swagger ui is available at http://localhost:8080/swagger-ui/index.html Bruno collection There is a non complete api collection for Bruno . Authorization There are two ways to access the api. Use the login endpoint, copy the jwt token and add a header to your request AUTHORIZATION: Bearer <token> Within the application, create a new api key (Settings -> Api key) copy it and use it with the following header AUTHORIZATION: <apikey>","title":"API"},{"location":"3-api/#api","text":"If you ever want to integrate with SSS via API you can.","title":"API"},{"location":"3-api/#openapi","text":"The OpenAPI descriptions are here: http://localhost:8080/v3/api-docs Swagger ui is available at http://localhost:8080/swagger-ui/index.html","title":"OpenAPI"},{"location":"3-api/#bruno-collection","text":"There is a non complete api collection for Bruno .","title":"Bruno collection"},{"location":"3-api/#authorization","text":"There are two ways to access the api. Use the login endpoint, copy the jwt token and add a header to your request AUTHORIZATION: Bearer <token> Within the application, create a new api key (Settings -> Api key) copy it and use it with the following header AUTHORIZATION: <apikey>","title":"Authorization"},{"location":"4-mcp-server/","text":"MCP Server SpendSpentSpent comes with a built-in MCP server so you can use a chatbot to interact with the service. Generate an API Key To get started, you need to generate an API Key. Go to settings -> Api Keys and create a new key then copy it. Add the mcp server to your LLM Application Add a new MCP server using a remote setup, the url should be: <url of your SSS installtion>/mcp . Example your SSS installation is running on https://sss.mydomain.com , then the MCP server url is https://sss.mydomain.com/mcp . The type of the server (if required to choose) is HTTP Stream .","title":"MCP Server"},{"location":"4-mcp-server/#mcp-server","text":"SpendSpentSpent comes with a built-in MCP server so you can use a chatbot to interact with the service.","title":"MCP Server"},{"location":"4-mcp-server/#generate-an-api-key","text":"To get started, you need to generate an API Key. Go to settings -> Api Keys and create a new key then copy it.","title":"Generate an API Key"},{"location":"4-mcp-server/#add-the-mcp-server-to-your-llm-application","text":"Add a new MCP server using a remote setup, the url should be: <url of your SSS installtion>/mcp . Example your SSS installation is running on https://sss.mydomain.com , then the MCP server url is https://sss.mydomain.com/mcp . The type of the server (if required to choose) is HTTP Stream .","title":"Add the mcp server to your LLM Application"}]}